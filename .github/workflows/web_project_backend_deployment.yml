# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: elastic.beanstalk.prod CD

on:
  push:
    branches: [dockerized_app]

env:
  NODE_ENV: prod
  APP_VERSION: 6

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - run: echo $NODE_ENV

      - name: Installing NPM in the frontend
        working-directory: ./frontend
        run: npm ci

      - name: list available scripts for npm
        working-directory: ./frontend
        run: npm run

      - name: build a frontend react app using webpack
        working-directory: ./frontend
        run: npx webpack build --config ./webpack.config.js --mode production --node-env production --env environment=docker

      - name: move the build to the backend
        working-directory: ./frontend
        run: mv dist ../backend/dist

      - name: Installing NPM in the backend
        working-directory: ./backend
        run: npm ci

      - name: Configure AWS credetials
        uses: aws-actions/configure-aws-credetials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          aws-region: us-east-1

      - name: Login to Elastic Container Registry (ECR) Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v18
        with:
          registry-type: public

      - name: Build, tag, and push docker image to ECR Public
        working-directory: ./backend
        env:
          DOCKER_REGISTRY: public.ecr.aws/e8u7j0e0
          APP_NAME: web_app
          APP_VERSION: 6
        run: |
          docker build -t $DOCKER_REGISTRY/$APP_NAME:$APP_VERSION -t $DOCKER_REGISTRY/$APP_NAME:latest .
          docker push $DOCKER_REGISTRY/$APP_NAME:$APP_VERSION
          docker push $DOCKER_REGISTRY/$APP_NAME:latest
          
      #- name: Generate deployment backend package
      #  working-directory: ./backend
      #  run: zip -r deploy.zip * -x "**node_modules**"

      - name: Get timestamp
        uses: gerred/actions/current-time@master
        id: current-time

      - name: Run string replace
        uses: frabert/replace-string-action@master
        id: format-time
        with:
          pattern: '[:\.]+'
          string: "${{ steps.current-time.outputs.time }}"
          replace-with: "-"
          flags: "g"


      - name: Beanstalk Deploy web app
        uses: einaregilsson/beanstalk-deploy@v18
        with:
          aws_access_key: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws_secret_key: ${{secrets.AWS_ACCESS_KEY_SECRET}}
          application_name: web-app
          environment_name: Webapp-env
          region: ap-southeast-1
          version_label: "app-version-${{ steps.format-time.outputs.replaced }}" #Using file  timestamp for the versions
          deployment_package: ./backend/Dockerrun.aws.json

      - name: Installing NPM in the worker
        working-directory: ./worker
        run: npm install

      - working-directory: ./worker
        run: npm ci

      - name: Generate deployment worker package
        working-directory: ./worker
        run: zip -r deploy.zip * -x "**node_modules**"

      - name: Beanstalk Deploy worker app
        uses: einaregilsson/beanstalk-deploy@v18
        with:
          aws_access_key: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws_secret_key: ${{secrets.AWS_ACCESS_KEY_SECRET}}
          application_name: worker_application
          environment_name: Workerapplication-env
          region: ap-southeast-1
          version_label: "app-version-${{ steps.format-time.outputs.replaced }}" #Using timestamp for the versions
          deployment_package: ./worker/deploy.zip

      - name: Deployed successfully!
        run: echo App deployed to ELB
